# Generated by Django 5.1.5 on 2025-07-05 22:43

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0094_alter_page_locale"),
        ("wagtaildocs", "0014_alter_document_file_size"),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="AboutPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "headshot_image",
                    models.URLField(blank=True, help_text="URL to headshot image"),
                ),
                (
                    "headshot_alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for headshot image",
                        max_length=200,
                    ),
                ),
                (
                    "philosophy_quote",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Philosophy quote in the hero section"
                    ),
                ),
                (
                    "philosophy_quote_link",
                    models.CharField(
                        blank=True,
                        help_text="Link for the philosophy quote attribution (can be relative or absolute URL)",
                        max_length=500,
                    ),
                ),
                (
                    "philosophy_quote_link_text",
                    models.CharField(
                        blank=True,
                        help_text="Text for the philosophy quote link",
                        max_length=200,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Name and pronouns", max_length=200
                    ),
                ),
                (
                    "professional_title",
                    models.CharField(
                        blank=True, help_text="Professional title", max_length=200
                    ),
                ),
                ("linkedin_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("bluesky_url", models.URLField(blank=True)),
                ("instagram_url", models.URLField(blank=True)),
                ("tiktok_url", models.URLField(blank=True)),
                ("calendar_url", models.URLField(blank=True)),
                ("sec_info_url", models.URLField(blank=True)),
                (
                    "professional_background_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for professional background section",
                        max_length=200,
                    ),
                ),
                (
                    "professional_background_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Professional background content"
                    ),
                ),
                (
                    "external_roles_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for external roles section",
                        max_length=200,
                    ),
                ),
                (
                    "external_roles_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="External roles and leadership content"
                    ),
                ),
                (
                    "speaking_writing_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for speaking & writing section",
                        max_length=200,
                    ),
                ),
                (
                    "speaking_writing_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Speaking & writing content"
                    ),
                ),
                (
                    "speaking_cta_text",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Call-to-action text for speaking section"
                    ),
                ),
                (
                    "speaking_contact_note",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Contact note for speaking section"
                    ),
                ),
                (
                    "calendar_link",
                    models.URLField(blank=True, help_text="Calendar booking link"),
                ),
                (
                    "calendar_link_text",
                    models.CharField(
                        blank=True, help_text="Text for calendar link", max_length=200
                    ),
                ),
                (
                    "email_link",
                    models.EmailField(
                        blank=True, help_text="Contact email address", max_length=254
                    ),
                ),
                (
                    "email_link_text",
                    models.CharField(
                        blank=True, help_text="Text for email link", max_length=200
                    ),
                ),
                (
                    "personal_interests_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for personal interests section",
                        max_length=200,
                    ),
                ),
                (
                    "personal_interests_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Personal interests content"
                    ),
                ),
                (
                    "current_role_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Current role description for What I Do Now panel",
                    ),
                ),
                (
                    "philosophy_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Philosophy description for What I Do Now panel",
                    ),
                ),
                (
                    "client_focus_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Client focus description for What I Do Now panel",
                    ),
                ),
                ("featured_post_1_title", models.CharField(blank=True, max_length=200)),
                (
                    "featured_post_1_description",
                    models.CharField(blank=True, max_length=300),
                ),
                ("featured_post_1_url", models.CharField(blank=True, max_length=500)),
                ("featured_post_2_title", models.CharField(blank=True, max_length=200)),
                (
                    "featured_post_2_description",
                    models.CharField(blank=True, max_length=300),
                ),
                ("featured_post_2_url", models.CharField(blank=True, max_length=500)),
                ("featured_post_3_title", models.CharField(blank=True, max_length=200)),
                (
                    "featured_post_3_description",
                    models.CharField(blank=True, max_length=300),
                ),
                ("featured_post_3_url", models.CharField(blank=True, max_length=500)),
                ("featured_post_4_title", models.CharField(blank=True, max_length=200)),
                (
                    "featured_post_4_description",
                    models.CharField(blank=True, max_length=300),
                ),
                ("featured_post_4_url", models.CharField(blank=True, max_length=500)),
                (
                    "speaking_topics",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Topics covered in speaking engagements"
                    ),
                ),
                (
                    "speaker_bio_url",
                    models.URLField(blank=True, help_text="URL to speaker bio PDF"),
                ),
            ],
            options={
                "verbose_name": "About Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="AccessibilityPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("standards_text", wagtail.fields.RichTextField(blank=True)),
                ("features_text", wagtail.fields.RichTextField(blank=True)),
                ("feedback_text", wagtail.fields.RichTextField(blank=True)),
                ("technical_text", wagtail.fields.RichTextField(blank=True)),
                ("limitations_text", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Accessibility Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="AdvisorPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("hero_title", models.CharField(blank=True, max_length=200)),
                ("hero_subtitle", models.CharField(blank=True, max_length=300)),
                ("hero_description", wagtail.fields.RichTextField(blank=True)),
                ("services_title", models.CharField(blank=True, max_length=200)),
                ("services_content", wagtail.fields.RichTextField(blank=True)),
                ("benefits_title", models.CharField(blank=True, max_length=200)),
                ("benefits_content", wagtail.fields.RichTextField(blank=True)),
                ("technology_title", models.CharField(blank=True, max_length=200)),
                ("technology_content", wagtail.fields.RichTextField(blank=True)),
                ("cta_title", models.CharField(blank=True, max_length=200)),
                ("cta_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Adviser Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("description", wagtail.fields.RichTextField(blank=True)),
                (
                    "display_title",
                    models.CharField(
                        blank=True,
                        help_text="Optional custom title to display on the page (if blank, uses the page title)",
                        max_length=255,
                    ),
                ),
                ("featured_title", models.CharField(blank=True, max_length=200)),
                ("featured_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Blog Index Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="CompliancePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("content", wagtail.fields.RichTextField()),
                (
                    "document_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("form_adv", "Form ADV"),
                            ("exclusion_list", "Exclusion List"),
                            ("compliance_policy", "Compliance Policy"),
                            ("disclosure", "Disclosure Document"),
                        ],
                        max_length=100,
                    ),
                ),
                ("effective_date", models.DateField(blank=True, null=True)),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="Document version", max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "Compliance Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ConsultationPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(help_text="Main headline", max_length=200),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        help_text="Subtitle text below the main headline",
                        max_length=500,
                    ),
                ),
                (
                    "introduction",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Introduction text explaining the consultation process",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Contact email for consultations",
                        max_length=254,
                    ),
                ),
                (
                    "scheduling_embed_code",
                    models.TextField(
                        blank=True,
                        help_text="Optional: Embed code for scheduling widget (Calendly, etc.)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Consultation Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ContactFormPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("form_description", wagtail.fields.RichTextField(blank=True)),
                ("thank_you_title", models.CharField(blank=True, max_length=200)),
                ("thank_you_message", wagtail.fields.RichTextField(blank=True)),
                ("enable_form", models.BooleanField(default=True)),
                (
                    "require_phone",
                    models.BooleanField(
                        default=False, help_text="Require phone number field"
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Form Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ContactPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("contact_description", wagtail.fields.RichTextField(blank=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", wagtail.fields.RichTextField(blank=True)),
                (
                    "show_contact_form",
                    models.BooleanField(
                        default=True, help_text="Show the contact form on this page"
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="CriteriaPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(help_text="Main headline", max_length=200),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        help_text="Subtitle text below the main headline",
                        max_length=500,
                    ),
                ),
                (
                    "criteria_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Description of the criteria and screening process",
                    ),
                ),
                (
                    "transparency_section_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for transparency section",
                        max_length=200,
                    ),
                ),
                (
                    "transparency_description",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Description of transparency approach"
                    ),
                ),
                (
                    "transparency_benefits",
                    models.TextField(
                        blank=True, help_text="Benefits of transparency, one per line"
                    ),
                ),
                (
                    "github_criteria_url",
                    models.URLField(help_text="URL to GitHub screening policy"),
                ),
                (
                    "exclusions_section_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for exclusions section",
                        max_length=200,
                    ),
                ),
                (
                    "exclusions_note",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Note about exclusions"
                    ),
                ),
                (
                    "additional_resources",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Links to additional resources and documentation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Criteria Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EncyclopediaEntry",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        help_text="Brief summary shown on index page (max 500 characters)",
                        max_length=500,
                    ),
                ),
                (
                    "detailed_content",
                    wagtail.fields.RichTextField(
                        help_text="Detailed explanation of the term"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("risk", "Risk Management"),
                            ("strategy", "Investment Strategy"),
                            ("instruments", "Financial Instruments"),
                            ("analysis", "Analysis & Research"),
                            ("ethics", "Ethical Investing"),
                            ("markets", "Markets & Trading"),
                            ("regulation", "Regulation & Compliance"),
                            ("general", "General Finance"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "related_terms",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated list of related terms",
                        max_length=500,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "examples",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Examples and use cases"
                    ),
                ),
                (
                    "further_reading",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Links to additional resources"
                    ),
                ),
            ],
            options={
                "verbose_name": "Encyclopedia Entry",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EncyclopediaIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Encyclopedia Index Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="FAQArticle",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="Brief summary shown on index page (max 500 characters)",
                        max_length=500,
                    ),
                ),
                (
                    "content",
                    wagtail.fields.RichTextField(help_text="Detailed article content"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("account", "Account Management & Setup"),
                            ("investment", "Investment Philosophy & Options"),
                            ("planning", "Financial Planning & Education"),
                            ("company", "Company Information"),
                            ("help", "Help & Insight"),
                            ("altruist", "Altruist Platform"),
                            ("general", "General Questions"),
                            ("ethical_capital", "Ethical Capital Philosophy"),
                            ("how_we_invest", "How We Invest"),
                            ("investing_101", "Investing 101"),
                            ("big_questions", "Big Questions"),
                            ("investment_approach", "Investment Approach & Philosophy"),
                            ("esg_integration", "ESG Integration & Analysis"),
                            ("stewardship", "Stewardship & Engagement"),
                            ("reporting", "Reporting & Verification"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher numbers appear first"
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Feature this article"
                    ),
                ),
                (
                    "related_articles",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated list of related article titles",
                        max_length=500,
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        help_text="Keywords for search and SEO",
                        max_length=300,
                    ),
                ),
            ],
            options={
                "verbose_name": "FAQ Article",
                "ordering": ["-priority", "title"],
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="FAQIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("description", wagtail.fields.RichTextField(blank=True)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("contact_address", models.CharField(blank=True, max_length=300)),
                ("meeting_link", models.URLField(blank=True)),
            ],
            options={
                "verbose_name": "FAQ Index Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="FAQPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "FAQ Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("hero_tagline", models.CharField(blank=True, max_length=100)),
                (
                    "hero_title",
                    models.CharField(
                        help_text="Main homepage headline", max_length=300
                    ),
                ),
                (
                    "hero_subtitle",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Hero description text"
                    ),
                ),
                (
                    "excluded_percentage",
                    models.CharField(
                        blank=True,
                        help_text="Percentage of S&P 500 excluded",
                        max_length=10,
                    ),
                ),
                (
                    "since_year",
                    models.CharField(
                        blank=True,
                        help_text="Year established or founding info",
                        max_length=20,
                    ),
                ),
                ("philosophy_title", models.CharField(blank=True, max_length=200)),
                (
                    "philosophy_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Investment philosophy description"
                    ),
                ),
                (
                    "philosophy_highlight",
                    models.CharField(
                        blank=True, help_text="Key philosophy statement", max_length=300
                    ),
                ),
                (
                    "philosophy_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for investment philosophy",
                        max_length=100,
                    ),
                ),
                (
                    "principles_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for principles",
                        max_length=100,
                    ),
                ),
                (
                    "strategies_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for strategies",
                        max_length=100,
                    ),
                ),
                (
                    "process_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for process",
                        max_length=100,
                    ),
                ),
                (
                    "serve_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for who we serve",
                        max_length=100,
                    ),
                ),
                (
                    "cta_section_header",
                    models.CharField(
                        blank=True,
                        help_text="Section header for call to action",
                        max_length=100,
                    ),
                ),
                ("principles_intro", wagtail.fields.RichTextField(blank=True)),
                (
                    "process_principle_1_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("process_principle_1_content", models.TextField(blank=True)),
                (
                    "process_principle_2_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("process_principle_2_content", models.TextField(blank=True)),
                (
                    "process_principle_3_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("process_principle_3_content", models.TextField(blank=True)),
                (
                    "practice_principle_1_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("practice_principle_1_content", models.TextField(blank=True)),
                (
                    "practice_principle_2_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("practice_principle_2_content", models.TextField(blank=True)),
                (
                    "practice_principle_3_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("practice_principle_3_content", models.TextField(blank=True)),
                ("strategies_intro", wagtail.fields.RichTextField(blank=True)),
                ("process_title", models.CharField(blank=True, max_length=200)),
                ("process_step_1_title", models.CharField(blank=True, max_length=100)),
                ("process_step_1_content", models.TextField(blank=True)),
                ("process_step_2_title", models.CharField(blank=True, max_length=100)),
                ("process_step_2_content", models.TextField(blank=True)),
                ("process_step_3_title", models.CharField(blank=True, max_length=100)),
                ("process_step_3_content", models.TextField(blank=True)),
                ("process_step_4_title", models.CharField(blank=True, max_length=100)),
                ("process_step_4_content", models.TextField(blank=True)),
                (
                    "serve_individual_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("serve_individual_content", models.TextField(blank=True)),
                ("serve_advisor_title", models.CharField(blank=True, max_length=100)),
                ("serve_advisor_content", models.TextField(blank=True)),
                (
                    "serve_institution_title",
                    models.CharField(blank=True, max_length=100),
                ),
                ("serve_institution_content", models.TextField(blank=True)),
                ("cta_title", models.CharField(blank=True, max_length=200)),
                ("cta_description", wagtail.fields.RichTextField(blank=True)),
                (
                    "minimum_investment_text",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "client_availability_text",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "disclaimer_text",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Legal disclaimer and footnotes"
                    ),
                ),
            ],
            options={
                "verbose_name": "Homepage",
                "verbose_name_plural": "Homepages",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="InstitutionalPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("hero_title", models.CharField(blank=True, max_length=200)),
                ("hero_subtitle", models.CharField(blank=True, max_length=300)),
                ("hero_description", wagtail.fields.RichTextField(blank=True)),
                ("solutions_title", models.CharField(blank=True, max_length=200)),
                ("solutions_content", wagtail.fields.RichTextField(blank=True)),
                ("capabilities_title", models.CharField(blank=True, max_length=200)),
                ("capabilities_content", wagtail.fields.RichTextField(blank=True)),
                ("scale_title", models.CharField(blank=True, max_length=200)),
                ("scale_content", wagtail.fields.RichTextField(blank=True)),
                ("cta_title", models.CharField(blank=True, max_length=200)),
                ("cta_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Institutional Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="LegalPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("content", wagtail.fields.RichTextField()),
                (
                    "effective_date",
                    models.DateField(
                        blank=True,
                        help_text="When this legal document takes effect",
                        null=True,
                    ),
                ),
                ("updated_at", models.DateField(auto_now=True)),
            ],
            options={
                "verbose_name": "Legal Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="MediaPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "intro_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Introduction text that appears at the top of the media page",
                    ),
                ),
                (
                    "press_kit_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for the press kit section",
                        max_length=200,
                    ),
                ),
                (
                    "press_kit_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Description and information about available press materials",
                    ),
                ),
            ],
            options={
                "verbose_name": "Media Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="NewsletterPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("benefits_title", models.CharField(blank=True, max_length=200)),
                ("benefits_text", wagtail.fields.RichTextField(blank=True)),
                ("privacy_text", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Newsletter Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="OnboardingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("form_description", wagtail.fields.RichTextField(blank=True)),
                (
                    "enable_form",
                    models.BooleanField(
                        default=True,
                        help_text="Enable the onboarding form on this page",
                    ),
                ),
                ("thank_you_title", models.CharField(blank=True, max_length=200)),
                ("thank_you_message", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Onboarding Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PricingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("pricing_description", wagtail.fields.RichTextField(blank=True)),
                ("enterprise_title", models.CharField(blank=True, max_length=200)),
                ("enterprise_description", wagtail.fields.RichTextField(blank=True)),
                ("contact_cta", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Pricing Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PRIDDQPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(help_text="Main headline", max_length=200),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        help_text="Subtitle text below the main headline",
                        max_length=500,
                    ),
                ),
                (
                    "hero_description",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Hero section description"
                    ),
                ),
                (
                    "updated_at",
                    models.CharField(
                        help_text="Month and year when this document was last updated",
                        max_length=50,
                    ),
                ),
                (
                    "executive_summary",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Executive summary of ESG approach"
                    ),
                ),
                (
                    "strategy_governance_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Strategy and governance practices content",
                    ),
                ),
                (
                    "esg_integration_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="ESG integration methodology and practices",
                    ),
                ),
                (
                    "stewardship_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Stewardship and engagement practices"
                    ),
                ),
                (
                    "transparency_content",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Reporting and transparency practices"
                    ),
                ),
                (
                    "climate_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Climate change and environmental practices",
                    ),
                ),
                (
                    "reporting_verification_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Reporting and verification practices content",
                    ),
                ),
                (
                    "additional_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Additional information and internal ESG management",
                    ),
                ),
                (
                    "screening_policy_url",
                    models.URLField(help_text="URL to open-source screening policy"),
                ),
                (
                    "form_adv_url",
                    models.URLField(blank=True, help_text="URL to Form ADV disclosure"),
                ),
            ],
            options={
                "verbose_name": "PRI DDQ Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ProcessPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("process_overview", wagtail.fields.RichTextField(blank=True)),
                ("step1_title", models.CharField(blank=True, max_length=200)),
                ("step1_content", wagtail.fields.RichTextField(blank=True)),
                ("step2_title", models.CharField(blank=True, max_length=200)),
                ("step2_content", wagtail.fields.RichTextField(blank=True)),
                ("step3_title", models.CharField(blank=True, max_length=200)),
                ("step3_content", wagtail.fields.RichTextField(blank=True)),
                ("step4_title", models.CharField(blank=True, max_length=200)),
                ("step4_content", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Process Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ResearchPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("description", wagtail.fields.RichTextField(blank=True)),
                ("featured_title", models.CharField(blank=True, max_length=200)),
                ("featured_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Research Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="SolutionsPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(help_text="Main headline", max_length=200),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        help_text="Subtitle text below the main headline",
                        max_length=500,
                    ),
                ),
                (
                    "hero_description",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Hero section description"
                    ),
                ),
                (
                    "strategies_section_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for strategies section",
                        max_length=200,
                    ),
                ),
                (
                    "strategies_intro",
                    models.TextField(
                        blank=True, help_text="Introduction text for strategies section"
                    ),
                ),
                ("individuals_title", models.CharField(blank=True, max_length=200)),
                ("individuals_content", wagtail.fields.RichTextField(blank=True)),
                ("institutions_title", models.CharField(blank=True, max_length=200)),
                ("institutions_content", wagtail.fields.RichTextField(blank=True)),
                ("advisors_title", models.CharField(blank=True, max_length=200)),
                ("advisors_content", wagtail.fields.RichTextField(blank=True)),
                ("cta_title", models.CharField(blank=True, max_length=200)),
                ("cta_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Solutions Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="StrategyListPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro_text", wagtail.fields.RichTextField(blank=True)),
                ("description", wagtail.fields.RichTextField(blank=True)),
                ("comparison_title", models.CharField(blank=True, max_length=200)),
                ("comparison_description", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Strategy List Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="StrategyPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "strategy_subtitle",
                    models.CharField(
                        blank=True,
                        help_text="Brief description shown in header",
                        max_length=300,
                    ),
                ),
                (
                    "strategy_description",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Main strategy description"
                    ),
                ),
                (
                    "strategy_label",
                    models.CharField(
                        blank=True,
                        help_text="Label shown on strategy card (e.g., 'Our Flagship')",
                        max_length=100,
                    ),
                ),
                ("risk_level", models.CharField(blank=True, max_length=100)),
                (
                    "ethical_implementation",
                    models.CharField(blank=True, max_length=100),
                ),
                ("holdings_count", models.CharField(blank=True, max_length=50)),
                ("best_for", models.CharField(blank=True, max_length=100)),
                ("cash_allocation", models.CharField(blank=True, max_length=20)),
                (
                    "benchmark_name",
                    models.CharField(
                        blank=True,
                        help_text="e.g., ACWI, AGG/PFF, S&P 500",
                        max_length=50,
                    ),
                ),
                ("ytd_return", models.CharField(blank=True, max_length=20)),
                ("ytd_benchmark", models.CharField(blank=True, max_length=20)),
                ("ytd_difference", models.CharField(blank=True, max_length=20)),
                ("one_year_return", models.CharField(blank=True, max_length=20)),
                ("one_year_benchmark", models.CharField(blank=True, max_length=20)),
                ("one_year_difference", models.CharField(blank=True, max_length=20)),
                ("three_year_return", models.CharField(blank=True, max_length=20)),
                ("three_year_benchmark", models.CharField(blank=True, max_length=20)),
                ("three_year_difference", models.CharField(blank=True, max_length=20)),
                ("since_inception_return", models.CharField(blank=True, max_length=20)),
                (
                    "since_inception_benchmark",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "since_inception_difference",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "inception_date",
                    models.DateField(
                        blank=True, help_text="Strategy inception date", null=True
                    ),
                ),
                (
                    "portfolio_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Portfolio composition and holdings information",
                    ),
                ),
                ("overweights_note", models.CharField(blank=True, max_length=300)),
                ("exclusions_note", models.CharField(blank=True, max_length=300)),
                ("healthcare_exclusion_note", models.TextField(blank=True)),
                ("commentary_title", models.CharField(blank=True, max_length=200)),
                (
                    "commentary_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Current market commentary and strategy insights",
                    ),
                ),
                ("process_title", models.CharField(blank=True, max_length=200)),
                (
                    "process_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Detailed process explanation for this strategy",
                    ),
                ),
                ("documents_title", models.CharField(blank=True, max_length=200)),
                (
                    "documents_content",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Links to relevant documents and disclosures",
                    ),
                ),
                ("performance_disclaimer", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "verbose_name": "Strategy Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="SupportTicket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254)),
                ("company", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("contact", "Contact Form"),
                            ("newsletter", "Newsletter Signup"),
                            ("onboarding", "Onboarding Request"),
                            ("garden_interest", "Garden Platform Interest"),
                        ],
                        max_length=20,
                    ),
                ),
                ("subject", models.CharField(max_length=255)),
                ("message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about this ticket"
                    ),
                ),
            ],
            options={
                "verbose_name": "Support Ticket",
                "verbose_name_plural": "Support Tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "excerpt",
                    models.CharField(
                        blank=True,
                        help_text="Brief description of the post for listings and SEO",
                        max_length=300,
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            ("rich_text", 0),
                            ("key_statistic", 13),
                            ("table", 18),
                            ("image", 19),
                            ("callout", 23),
                            ("quote", 25),
                        ],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {
                                    "features": [
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                        "document-link",
                                    ],
                                    "help_text": "Rich text content with basic formatting",
                                },
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"help_text": "The statistic value", "max_length": 50},
                            ),
                            2: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"help_text": "Statistic label", "max_length": 100},
                            ),
                            3: (
                                "wagtail.blocks.TextBlock",
                                (),
                                {
                                    "help_text": "Optional description",
                                    "required": False,
                                },
                            ),
                            4: (
                                "wagtail.blocks.DecimalBlock",
                                (),
                                {
                                    "decimal_places": 2,
                                    "default": 0.0,
                                    "max_digits": 3,
                                    "required": False,
                                },
                            ),
                            5: ("wagtail.blocks.TextBlock", (), {"required": False}),
                            6: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("high", "High Significance"),
                                        ("medium", "Medium Significance"),
                                        ("low", "Low Significance"),
                                    ],
                                    "required": False,
                                },
                            ),
                            7: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("performance", "Performance/Returns"),
                                        ("valuation", "Valuation Metrics"),
                                        ("risk", "Risk Metrics"),
                                        ("allocation", "Portfolio Allocation"),
                                        ("fundamental", "Fundamental Analysis"),
                                        ("market", "Market Data"),
                                    ],
                                    "required": False,
                                },
                            ),
                            8: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("bar", "Bar Chart"),
                                        (
                                            "performance_comparison",
                                            "Performance Comparison",
                                        ),
                                        ("allocation_pie", "Allocation Pie Chart"),
                                        ("trend_line", "Trend Line"),
                                        ("gauge", "Gauge/Meter"),
                                        ("callout", "Highlighted Callout"),
                                    ],
                                    "required": False,
                                },
                            ),
                            9: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("daily", "Daily"),
                                        ("weekly", "Weekly"),
                                        ("monthly", "Monthly"),
                                        ("quarterly", "Quarterly"),
                                        ("annual", "Annual"),
                                        ("ytd", "Year-to-Date"),
                                        ("since_inception", "Since Inception"),
                                        ("custom", "Custom Period"),
                                    ],
                                    "required": False,
                                },
                            ),
                            10: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 100, "required": False},
                            ),
                            11: ("wagtail.blocks.CharBlock", (), {"max_length": 100}),
                            12: (
                                "wagtail.blocks.ListBlock",
                                (11,),
                                {"required": False},
                            ),
                            13: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("value", 1),
                                        ("label", 2),
                                        ("description", 3),
                                        ("ai_confidence", 4),
                                        ("ai_context", 5),
                                        ("significance_level", 6),
                                        ("statistic_category", 7),
                                        ("visualization_type", 8),
                                        ("time_period", 9),
                                        ("chart_title", 10),
                                        ("chart_config", 5),
                                        ("related_entities", 12),
                                    ]
                                ],
                                {
                                    "icon": "success",
                                    "label": "Key Statistic",
                                    "template": "public_site/blocks/key_statistic.html",
                                },
                            ),
                            14: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Table title or caption",
                                    "required": False,
                                },
                            ),
                            15: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {
                                    "help_text": "Optional description or context",
                                    "required": False,
                                },
                            ),
                            16: (
                                "wagtail.contrib.table_block.blocks.TableBlock",
                                (),
                                {
                                    "help_text": "Add table data - first row will be used as headers"
                                },
                            ),
                            17: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Data source attribution",
                                    "required": False,
                                },
                            ),
                            18: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("caption", 14),
                                        ("description", 15),
                                        ("table", 16),
                                        ("source", 17),
                                    ]
                                ],
                                {
                                    "icon": "table",
                                    "label": "Data Table",
                                    "template": "public_site/blocks/table_block.html",
                                },
                            ),
                            19: ("wagtail.images.blocks.ImageChooserBlock", (), {}),
                            20: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("info", "Info"),
                                        ("warning", "Warning"),
                                        ("success", "Success"),
                                        ("error", "Error"),
                                    ]
                                },
                            ),
                            21: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            22: ("wagtail.blocks.RichTextBlock", (), {}),
                            23: (
                                "wagtail.blocks.StructBlock",
                                [[("type", 20), ("title", 21), ("content", 22)]],
                                {"icon": "help"},
                            ),
                            24: ("wagtail.blocks.TextBlock", (), {}),
                            25: (
                                "wagtail.blocks.StructBlock",
                                [[("quote", 24), ("author", 21), ("source", 21)]],
                                {"icon": "openquote"},
                            ),
                        },
                        help_text="Rich content with AI-enhanced statistics, charts, and analysis blocks",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Legacy rich text field (use Content field above for new posts)",
                    ),
                ),
                ("author", models.CharField(blank=True, max_length=100)),
                (
                    "publish_date",
                    models.DateField(
                        blank=True, help_text="Leave blank for today's date", null=True
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Feature this post on the homepage"
                    ),
                ),
                (
                    "reading_time",
                    models.IntegerField(
                        default=5, help_text="Estimated reading time in minutes"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Automatically updated when the content is modified",
                    ),
                ),
                (
                    "featured_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Featured image for social sharing and blog listings",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "BlogPost",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="public_site.blogpost",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpost",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="public_site.BlogTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="ExclusionCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "icon",
                    models.CharField(
                        help_text="Emoji icon for category", max_length=10
                    ),
                ),
                ("title", models.CharField(help_text="Category title", max_length=100)),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what is excluded in this category"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exclusion_categories",
                        to="public_site.criteriapage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FAQItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("question", models.CharField(max_length=300)),
                ("answer", wagtail.fields.RichTextField()),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="faq_items",
                        to="public_site.faqpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GuidePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(help_text="Main headline", max_length=200),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        help_text="Subtitle text below the main headline",
                        max_length=500,
                    ),
                ),
                (
                    "guide_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Description of what's included in the guide",
                    ),
                ),
                (
                    "external_guide_url",
                    models.URLField(
                        blank=True,
                        help_text="Alternative: External URL for guide (if not using document upload)",
                    ),
                ),
                (
                    "guide_document",
                    models.ForeignKey(
                        blank=True,
                        help_text="PDF or other document to download",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtaildocs.document",
                    ),
                ),
            ],
            options={
                "verbose_name": "Guide Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="MediaItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.CharField(max_length=300)),
                ("description", wagtail.fields.RichTextField(blank=True)),
                (
                    "publication",
                    models.CharField(
                        blank=True, help_text="Publication name", max_length=200
                    ),
                ),
                ("publication_date", models.DateField(blank=True, null=True)),
                (
                    "external_url",
                    models.URLField(
                        blank=True, help_text="Link to external article/coverage"
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Feature this media item at the top"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_items",
                        to="public_site.mediapage",
                    ),
                ),
            ],
            options={
                "ordering": ["-featured", "-publication_date"],
            },
        ),
        migrations.CreateModel(
            name="SiteConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        help_text="Company brand name displayed in navigation and footer",
                        max_length=100,
                    ),
                ),
                (
                    "company_tagline",
                    models.CharField(
                        help_text="Main tagline for SEO and social media",
                        max_length=200,
                    ),
                ),
                (
                    "company_description",
                    models.TextField(
                        help_text="Company description for meta tags and schema markup"
                    ),
                ),
                (
                    "primary_email",
                    models.EmailField(
                        help_text="Primary contact email address", max_length=254
                    ),
                ),
                (
                    "support_email",
                    models.EmailField(
                        help_text="Support and accessibility contact email",
                        max_length=254,
                    ),
                ),
                (
                    "cio_email",
                    models.EmailField(
                        help_text="Chief Investment Officer email", max_length=254
                    ),
                ),
                (
                    "primary_phone",
                    models.CharField(help_text="Primary phone number", max_length=20),
                ),
                (
                    "accessibility_phone",
                    models.CharField(
                        help_text="Accessibility support phone number", max_length=20
                    ),
                ),
                (
                    "street_address",
                    models.CharField(help_text="Street address", max_length=200),
                ),
                ("city", models.CharField(help_text="City", max_length=100)),
                ("state", models.CharField(help_text="State or region", max_length=50)),
                (
                    "postal_code",
                    models.CharField(help_text="Postal/ZIP code", max_length=20),
                ),
                ("country", models.CharField(help_text="Country", max_length=100)),
                (
                    "twitter_handle",
                    models.CharField(
                        help_text="Twitter handle (include @)", max_length=50
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(blank=True, help_text="LinkedIn company page URL"),
                ),
                (
                    "default_meta_description",
                    models.TextField(
                        help_text="Default meta description for pages without custom descriptions"
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(help_text="Default meta keywords", max_length=300),
                ),
                (
                    "founding_year",
                    models.CharField(help_text="Company founding year", max_length=4),
                ),
                (
                    "copyright_text",
                    models.CharField(help_text="Footer copyright text", max_length=200),
                ),
                (
                    "business_hours",
                    models.CharField(
                        help_text="Business hours display text", max_length=100
                    ),
                ),
                (
                    "minimum_investment",
                    models.CharField(
                        help_text="Minimum investment amount", max_length=20
                    ),
                ),
                (
                    "contact_success_message",
                    models.TextField(
                        help_text="Success message for contact form submissions"
                    ),
                ),
                (
                    "contact_error_message",
                    models.TextField(
                        help_text="Error message for contact form submissions"
                    ),
                ),
                (
                    "newsletter_success_message",
                    models.TextField(
                        help_text="Success message for newsletter subscriptions"
                    ),
                ),
                (
                    "newsletter_title",
                    models.CharField(
                        help_text="Newsletter signup widget title", max_length=100
                    ),
                ),
                (
                    "newsletter_description",
                    models.TextField(help_text="Newsletter signup description"),
                ),
                (
                    "newsletter_privacy_text",
                    models.CharField(
                        help_text="Newsletter privacy notice", max_length=200
                    ),
                ),
                (
                    "investment_goal_growth_title",
                    models.CharField(
                        help_text="Growth investment goal title", max_length=50
                    ),
                ),
                (
                    "investment_goal_growth_desc",
                    models.TextField(help_text="Growth investment goal description"),
                ),
                (
                    "investment_goal_income_title",
                    models.CharField(
                        help_text="Income investment goal title", max_length=50
                    ),
                ),
                (
                    "investment_goal_income_desc",
                    models.TextField(help_text="Income investment goal description"),
                ),
                (
                    "investment_goal_balanced_title",
                    models.CharField(
                        help_text="Balanced investment goal title", max_length=50
                    ),
                ),
                (
                    "investment_goal_balanced_desc",
                    models.TextField(help_text="Balanced investment goal description"),
                ),
                (
                    "investment_goal_preservation_title",
                    models.CharField(
                        help_text="Preservation investment goal title", max_length=50
                    ),
                ),
                (
                    "investment_goal_preservation_desc",
                    models.TextField(
                        help_text="Preservation investment goal description"
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site Configuration",
            },
        ),
        migrations.CreateModel(
            name="NavigationMenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Text displayed in navigation", max_length=50
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="URL or path (e.g., /about/, /process/)",
                        max_length=200,
                    ),
                ),
                (
                    "external",
                    models.BooleanField(
                        default=False, help_text="Open in new tab/window"
                    ),
                ),
                (
                    "show_in_nav",
                    models.BooleanField(
                        default=True,
                        help_text="Display this item in the main navigation",
                    ),
                ),
                (
                    "show_in_footer",
                    models.BooleanField(
                        default=True, help_text="Display this item in the footer"
                    ),
                ),
                (
                    "parent",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nav_items",
                        to="public_site.siteconfiguration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Navigation Menu Item",
            },
        ),
        migrations.CreateModel(
            name="StrategyCard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "icon",
                    models.CharField(
                        help_text="Emoji icon for strategy", max_length=10
                    ),
                ),
                ("title", models.CharField(help_text="Strategy title", max_length=100)),
                (
                    "description",
                    models.TextField(help_text="Brief description of the strategy"),
                ),
                (
                    "features",
                    models.TextField(help_text="Strategy features, one per line"),
                ),
                (
                    "url",
                    models.CharField(help_text="URL to strategy page", max_length=200),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategy_cards",
                        to="public_site.solutionspage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StrategyHolding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("company_name", models.CharField(max_length=200)),
                ("ticker_symbol", models.CharField(max_length=20)),
                (
                    "weight_percent",
                    models.CharField(help_text="e.g., ~8.4%", max_length=20),
                ),
                (
                    "vertical",
                    models.CharField(
                        help_text="e.g., Lending, Real Estate, Innovation",
                        max_length=100,
                    ),
                ),
                ("investment_thesis", models.TextField()),
                (
                    "key_metrics",
                    models.TextField(
                        help_text="e.g., 40%+ annual revenue growth, AI market leader"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="holdings",
                        to="public_site.strategypage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StrategyGeographicAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "region",
                    models.CharField(
                        help_text="e.g., United States, International", max_length=100
                    ),
                ),
                (
                    "allocation_percent",
                    models.CharField(help_text="e.g., 78.0%", max_length=20),
                ),
                (
                    "benchmark_percent",
                    models.CharField(help_text="e.g., 62.0%", max_length=20),
                ),
                (
                    "difference_percent",
                    models.CharField(help_text="e.g., +16.0%", max_length=20),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geographic_allocations",
                        to="public_site.strategypage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StrategyDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("performance", "Performance Reports"),
                            ("strategy", "Strategy Information"),
                            ("regulatory", "Regulatory Disclosures"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.CharField(max_length=300)),
                (
                    "icon",
                    models.CharField(
                        help_text="Emoji icon for document", max_length=10
                    ),
                ),
                (
                    "document_url",
                    models.URLField(
                        blank=True, help_text="Link to document if available"
                    ),
                ),
                (
                    "requires_request",
                    models.BooleanField(
                        default=True, help_text="Document requires request"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="public_site.strategypage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StrategyRiskMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "standard_deviation",
                    models.CharField(
                        blank=True, help_text="e.g., 16.2%", max_length=20
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.CharField(blank=True, help_text="e.g., 0.78", max_length=20),
                ),
                (
                    "max_drawdown",
                    models.CharField(
                        blank=True, help_text="e.g., -22.1%", max_length=20
                    ),
                ),
                (
                    "beta",
                    models.CharField(blank=True, help_text="e.g., 0.94", max_length=20),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_metrics",
                        to="public_site.strategypage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StrategySectorPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "position_type",
                    models.CharField(
                        choices=[
                            ("overweight", "Overweight"),
                            ("exclusion", "Exclusion"),
                        ],
                        max_length=20,
                    ),
                ),
                ("sector_name", models.CharField(max_length=100)),
                (
                    "note",
                    models.TextField(
                        blank=True, help_text="Additional notes about this sector"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sector_positions",
                        to="public_site.strategypage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StrategyVerticalAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("vertical_name", models.CharField(max_length=100)),
                ("weight_percent", models.CharField(max_length=20)),
                ("dividend_yield", models.CharField(max_length=20)),
                ("pe_ratio", models.CharField(max_length=20)),
                ("revenue_cagr", models.CharField(max_length=20)),
                ("fcf_market_cap", models.CharField(max_length=20)),
                (
                    "is_total_row",
                    models.BooleanField(
                        default=False, help_text="Check for portfolio total row"
                    ),
                ),
                (
                    "is_benchmark_row",
                    models.BooleanField(
                        default=False, help_text="Check for benchmark comparison row"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vertical_allocations",
                        to="public_site.strategypage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
