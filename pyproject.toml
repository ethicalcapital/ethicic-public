[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ethicic-public"
version = "0.1.0"
description = "Ethical Capital public website"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Sloane Ortel", email = "sloane@ethicic.com"},
]
keywords = ["django", "wagtail", "ethical-investing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Framework :: Django :: 5.1",
    "Framework :: Wagtail",
    "Framework :: Wagtail :: 7",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core Django
    "Django==5.1.5",
    "gunicorn==21.2.0",
    "psycopg2-binary==2.9.9",
    # Wagtail CMS
    "wagtail==7.1",
    "django-modelcluster==6.3",
    "django-taggit==6.1.0",
    "djangorestframework==3.16.0",
    "Pillow==10.4.0",
    "wagtailmenus==4.0.1",
    # Forms
    "django-crispy-forms==2.3",
    "crispy-bootstrap4==2024.10",
    # Production essentials
    "whitenoise==6.7.0",
    "python-dotenv==1.0.1",
    "dj-database-url==2.2.0",
    # Optional but recommended
    "redis==5.0.8",
    "hiredis==3.0.0",
    "django-redis==5.4.0",
    # Web scraping (for content import)
    "beautifulsoup4==4.12.3",
    "requests==2.31.0",
    # Security and monitoring
    "django-cors-headers==4.4.0",
    "sentry-sdk==2.14.0",
    # Cloud storage
    "django-storages==1.14.4",
    "boto3==1.35.65",
    "posthog>=6.6.1",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest==7.4.3",
    "pytest-django==4.7.0",
    "pytest-cov==4.1.0",
    "pytest-xdist==3.5.0",
    "pytest-mock==3.12.0",

    # Test data factories
    "factory-boy==3.3.0",
    "faker==20.1.0",

    # Code quality
    "black==23.12.0",
    "isort==5.13.2",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "ruff>=0.1.11",

    # Test coverage
    "coverage==7.3.4",

    # Debugging
    "ipdb==0.13.13",
    "django-debug-toolbar==4.2.0",

    # Documentation
    "sphinx==7.2.6",
    "sphinx-rtd-theme==2.0.0",

    # Performance profiling
    "django-silk==5.0.4",

    # Linting
    "pre-commit==3.6.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["public_site*", "ethicic*"]
exclude = ["tests*", "docs*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "DJ", # flake8-django
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".bzr",
    "diagnose_connection.py",
    "diagnose_image_upload.py",
    "enhanced_link_checker.py",
    "test_wagtail_image_upload.py",
    "wagtail_403_solution.py",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "static",
    "media",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"settings.py" = ["E501"]
"*/migrations/*" = ["E501"]
"diagnose_*.py" = ["E402", "C901", "PLR0912", "PLR0915", "E501", "S110", "F401", "S103"]
"enhanced_*.py" = ["E402", "C901", "PLR0911", "PLR0912", "PLR0915", "E501", "S110", "F401", "SIM102"]
"wagtail_*.py" = ["E402", "C901", "PLR0912", "PLR0915", "E501", "S110", "F401", "S103"]
"test_*.py" = ["E402", "C901", "PLR0912", "PLR0915", "E501", "S110", "F401"]

[tool.ruff.isort]
known-first-party = ["public_site", "ethicic"]
known-third-party = ["django", "wagtail"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["public_site", "ethicic"]
known_third_party = ["django", "wagtail"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "ethicic.settings"
python_files = ["test_*.py", "*_test.py", "tests.py"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "-x",
    "-s",
    "-vv",
]
testpaths = ["tests"]
norecursedirs = [
    ".git",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "venv",
    "node_modules",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/node_modules/*",
    "manage.py",
    "setup.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "ethicic.settings"

[dependency-groups]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-django>=4.7.0",
]
